{"version":3,"sources":["components/Slider.js","components/World.js","App.js","reportWebVitals.js","index.js"],"names":["Slider","onYearChange","currentYear","id","style","width","alignItems","marginLeft","zIndex","type","World","props","myRef","React","createRef","p","properties","GDP_MD_EST","POP_EST","year","this","ISO_A2","NaN","co2","isNaN","console","log","NAME","err","node","current","d3","then","world","objects","countries","geometries","splice","findIndex","d","colorScale","domain","Math","max","map","getGDP","append","Cartogram","topoJson","topoObjectName","value","getYearCo2","color","f","label","units","valFormatter","text","catch","renderMap","ref","Component","initialState","App","event","target","setState","setTimeout","window","scrollTo","top","document","body","scrollHeight","left","behavior","state","textAlign","marginBottom","backgroundColor","getGDPPerCapita","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.61a13528.chunk.js","sourcesContent":["import React from 'react';\n// import './ImageLinkForm.css'\n\nconst Slider = ({onYearChange, currentYear}) => {\n\n  return (\n    <div>\n          <input id=\"sliderbar\" style={{ width:'50%', alignItems: 'center', marginLeft: '25%', zIndex:5}}\n                type=\"range\" id=\"volume\" min=\"1809\" max=\"2019\"  step=\"10\" onChange={onYearChange}/>\n    </div>\n  );\n\n\n}\nexport default Slider;\n","import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport Cartogram from 'cartogram-chart';\n\n\n\nexport default class World extends Component {\n    constructor(props){\n        super(props);\n        this.myRef = React.createRef();\n    }\n    getGDP({properties:p}){\n        return p.GDP_MD_EST * 1e6 / p.POP_EST;\n    }\n\n    getYearCo2({properties:p}, year){\n        if(!year){\n            year = this.props.currentYear;\n        }\n        \n        \n        try{\n            if(p.ISO_A2 === \"FK\" || p.ISO_A2 === \"TF\" || p.ISO_A2 === \"NC\" || p[year].co2===NaN || isNaN(p[year].co2*1)|| p[year].co2*1 === null || p[year].co2*1 === \"undefined\" || p[year].co2*1===NaN){\n                console.log(\"No co2 data for year\", year, \"country:\", p.NAME);\n                return 1;\n            }else{\n                return p[year].co2*1;\n            }\n            \n            \n        }catch (err){\n            return 1;\n        }\n    }\n\n    renderMap(){\n        const node  = this.myRef.current;\n        \n        d3.json('./countries_with_co2.json').then(world => {\n            world.objects.countries.geometries.splice(\n                world.objects.countries.geometries.findIndex(d => d.properties.ISO_A2 === 'AQ'), //remove antartica?\n                1\n            );\n            console.log(\"incoming world\", world);\n            \n            const colorScale = d3.scaleSequential(d3.interpolatePlasma)\n                                .domain([0, Math.max(...world.objects.countries.geometries.map(this.getGDP))]);\n            const currYear = this.props.currentYear;\n            d3.select(\"#volume\").append('svg');\n                Cartogram()\n                    // .width(2500)\n                    // .height(250)\n                    .topoJson(world)\n                    .topoObjectName('countries')\n                    .value(p => this.getYearCo2(p,this.props.year))\n                    .color(f => colorScale(this.getGDP(f)))\n                    .label(({ properties: p }) => `co2 produced by ${p.NAME} (${p.ISO_A2})`)\n                    .units(' Million tons')\n                    .valFormatter(d3.format('.0f'))\n                    (node)\n            \n            d3.select(node).append(\"text\")      // text label for the x axis\n            .style(\"text-anchor\", \"middle\")\n            .style(\"margin-left\",\"38.5%\")\n            .style(\"padding-top\",\"-100%\")\n            .style(\"padding-left\", \"10%\")\n            .style(\"padding-right\", \"10%\")\n            .style(\"border\", \"2px solid black\")\n            .style(\"background-clip\", \"content-box\")\n            .text(`${this.props.currentYear}`);\n            \n        }).catch((err)=> console.log(\"incomgin ERr\",err));\n    }\n    \n    \n    componentDidMount(){\n        this.renderMap();\n    }\n\n    componentDidUpdate(){\n        this.renderMap();\n    }\n\n    \n\n\n\n    render(){\n        return (\n          <div ref={this.myRef}>\n          </div>\n        );\n    }\n}\n","import React from 'react';\nimport Slider from './components/Slider.js';\nimport World from './components/World.js';\n\nconst initialState = {\n  year: 1809\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    // this.myRef = React.createRef();\n    this.state = initialState;\n }\n  onYearChange = (event) => {\n    console.log(\"calling year year chage\", event.target.value);\n    this.setState({ year: event.target.value });\n    // this.scrollToBottom();\n    setTimeout(function(){ window.scrollTo({\n      top: document.body.scrollHeight,\n      left: 0,\n      behavior: 'smooth'\n    })}\n    , 850);\n  }\n  // scrollToBottom() {\n  //   console.log(this.myRef);\n  //   this.myRef.scrollIntoView({ behavior: 'smooth' });\n  // }\n  getGDPPerCapita({ properties: p }) {\n    // console.log(p,p.POP_EST, p.GDP_MD_EST );\n    var v = 0;\n    return p.GDP_MD_EST * 1e6 / p.POP_EST;\n    // return v;\n  }\n render(){\n  return (\n    <div ref={this.myRef}>\n      \n      <div><h3 style={{textAlign: 'center', marginBottom:'-10%', marginLeft: '80px',backgroundColor: 'white'}}>Countries scaled by co2 emission</h3></div>\n      <World getGDPPerCapita={this.getGDPPerCapita} currentYear={this.state.year}/>\n      \n      <div style={{marginTop: '-8%'}}>\n      <h5 style={{textAlign: 'center',marginTop: '-12%'}}>Year: {this.state.year}</h5>\n      <Slider onYearChange={this.onYearChange} currentYear={this.state.year}/>\n      </div>\n    </div>\n  );\n }\n \n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}